/** @file boundary_file.cpp
 *
 * File created by Peter Watkins (KE7IST) 1/9/18.
 * Derived from original project code.
 * Splat!
 * @copyright 1997 - 2018 John A. Magliacane (KD2BD) and contributors.
 * See revision control history for contributions.
 * This file is covered by the LICENSE.md file in the root of this project.
 */

#include <cstdio>
#include <cstring>
#include <fstream>
#include <sstream>
#include <string>

#include "boundary_file.h"
#include "elevation_map.h"
#include "path.h"
#include "site.h"
#include "splat_run.h"

BoundaryFile::BoundaryFile(const SplatRun &sr) : sr(sr) { }

void BoundaryFile::LoadBoundaries(const std::string &filename,
                                  ElevationMap &em) {
    /* This function reads Cartographic Boundary Files available from
     the U.S. Census Bureau, and plots the data contained in those
     files on the PPM Map generated by SPLAT!.  Such files contain
     the coordinates that describe the boundaries of cities,
     counties, and states. */

    int x;
    double lat0, lon0, lat1, lon1;
    std::string line;
    std::stringstream ss;
    Site source, destination;

    Path path(sr.arraysize, sr.ppd);

    std::ifstream infile(filename);

    if (infile.is_open()) {
        std::getline(infile, line);  // Skip first line

        fprintf(stdout, "\nReading \"%s\"... ", filename.c_str());
        fflush(stdout);

        while (std::getline(infile, line) && line.substr(0, 3) != "END") {
            ss.clear();
            ss.str(line);
            ss >> lon0 >> lat0;

            std::getline(infile, line);

            while (line.substr(0, 3) != "END" && infile.good()) {
                ss.clear();
                ss.str(line);
                ss >> lon1 >> lat1;

                source.lat = lat0;
                source.lon = (lon0 > 0.0 ? 360.0 - lon0 : -lon0);
                destination.lat = lat1;
                destination.lon = (lon1 > 0.0 ? 360.0 - lon1 : -lon1);

                path.ReadPath(source, destination, em);

                for (x = 0; x < path.length; x++)
                    em.OrMask(path.lat[x], path.lon[x], 4);

                lat0 = lat1;
                lon0 = lon1;

                if (! std::getline(infile, line))
                    break;
            }
        }

        infile.close();

        fprintf(stdout, "Done!");
        fflush(stdout);
    }

    else
        fprintf(stderr, "\n*** ERROR: \"%s\": not found!", filename.c_str());
}
